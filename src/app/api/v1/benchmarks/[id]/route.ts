import { NextResponse } from "next/server";
import { MOCK_BENCHMARKS, MOCK_BENCHMARK_DETAILS } from "@/lib/mock-data/benchmarks";
import type { BenchmarkDetail } from "@/types/models";

export const dynamic = "force-dynamic";

/**
 * GET /api/v1/benchmarks/[id]
 *
 * Returns detailed information for a specific benchmark
 */
export async function GET(request: Request, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;

    // Check if detailed data exists
    if (MOCK_BENCHMARK_DETAILS[id]) {
      return NextResponse.json(MOCK_BENCHMARK_DETAILS[id]);
    }

    // If not in details, find in basic list and generate detail
    const benchmark = MOCK_BENCHMARKS.find((b) => b.id === id);

    if (!benchmark) {
      return NextResponse.json({ error: "Benchmark not found" }, { status: 404 });
    }

    // Generate basic detail structure for benchmarks without custom details
    const generatedDetail: BenchmarkDetail = {
      ...benchmark,
      rubric: `# ${benchmark.title}\n\n${benchmark.description}\n\nThis autogenerated rubric summarises the evaluation focus for ${benchmark.title}.`,
      scoringRules: {
        maxScore: 100,
        passingScore: 70,
        breakdown: [
          {
            category: "Accuracy",
            weight: 0.6,
            description: "Measures how closely agent outputs match the benchmark expectations.",
          },
          {
            category: "Reliability",
            weight: 0.4,
            description: "Evaluates consistency, compliance with instructions and error handling.",
          },
        ],
      },
      examples: [
        {
          title: `${benchmark.title} 样例任务`,
          description: `展示 ${benchmark.title} 在典型输入上的表现，请使用项目文档中的准备规范。`,
          expectedOutput: "请提供结构化回答，并附带必要的解释或证据。",
        },
        {
          title: "评估基准说明",
          description: `题目数量：${benchmark.questionCount}，难度等级：${benchmark.difficulty}。提交前请确保代理完成自检。`,
        },
      ],
      resources: [
        {
          title: "提交检查清单",
          url: "/docs/benchmarks/submission-checklist",
          type: "reference",
        },
        {
          title: "运行环境要求",
          url: "/docs/benchmarks/runtime-requirements",
          type: "documentation",
        },
      ],
      versions: [
        {
          version: "1.0.0",
          releaseDate: benchmark.updatedAt,
          changelog: "自动生成的基准详情，覆盖基础指标与提交流程参考。",
        },
      ],
      currentVersion: "1.0.0",
    };

    return NextResponse.json(generatedDetail);
  } catch (error) {
    console.error(`Error in /api/v1/benchmarks/[id]:`, error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}
